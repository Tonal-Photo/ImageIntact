import XCTest
@testable import ImageIntact

class EntitlementDocumentationTests: XCTestCase {
    
    /// Test that generates/updates ENTITLEMENTS.md documentation
    /// Run this test whenever entitlements change to update documentation
    func testDocumentEntitlements() throws {
        // Path to the entitlements file
        let projectPath = URL(fileURLWithPath: #file)
            .deletingLastPathComponent()
            .deletingLastPathComponent()
        
        let entitlementsPath = projectPath
            .appendingPathComponent("ImageIntact")
            .appendingPathComponent("ImageIntact.entitlements")
        
        // Read the entitlements plist
        guard let entitlementsData = try? Data(contentsOf: entitlementsPath),
              let plist = try? PropertyListSerialization.propertyList(from: entitlementsData, format: nil) as? [String: Any] else {
            XCTFail("Could not read entitlements file at \(entitlementsPath)")
            return
        }
        
        // Build documentation
        var markdown = """
        # ImageIntact Entitlements Documentation
        
        This document is automatically generated by `EntitlementDocumentationTests.swift`
        Last updated: \(DateFormatter.localizedString(from: Date(), dateStyle: .long, timeStyle: .none))
        
        ## Active Entitlements
        
        The following entitlements are configured in ImageIntact.entitlements:
        
        """
        
        // Document each entitlement
        let sensitiveEntitlements = [
            "com.apple.security.files.downloads.read-write",
            "com.apple.security.assets.pictures.read-write",
            "com.apple.security.files.user-selected.read-write",
            "com.apple.security.files.bookmarks.app-scope",
            "com.apple.security.network.client",
            "com.apple.security.network.server"
        ]
        
        for (key, value) in plist.sorted(by: { $0.key < $1.key }) {
            if let boolValue = value as? Bool, boolValue {
                markdown += "\n### `\(key)`\n\n"
                
                // Add explanations for known entitlements
                switch key {
                case "com.apple.security.app-sandbox":
                    markdown += "**Purpose**: Enables App Sandbox for Mac App Store distribution\n\n"
                    markdown += "**Justification**: Required for Mac App Store apps\n"
                    
                case "com.apple.security.files.downloads.read-write":
                    markdown += "**Purpose**: Read/write access to Downloads folder and external volumes\n\n"
                    markdown += "**Justification**: Users frequently select external drives and network-attached storage as backup destinations, which are often mounted in Downloads or other locations outside the sandbox. Required for writing backup files to user-selected destinations.\n"
                    markdown += "\n**App Store Review Note**: This entitlement requires explanation in the App Sandbox Information section.\n"
                    
                case "com.apple.security.assets.pictures.read-write":
                    markdown += "**Purpose**: Read/write access to Pictures folder and Photos library\n\n"
                    markdown += "**Justification**: ImageIntact needs to read photos and videos from the user's Photos library and Pictures folder for backup. This includes RAW files, JPEGs, HEICs, videos, and photo editing session files.\n"
                    markdown += "\n**App Store Review Note**: This entitlement requires explanation in the App Sandbox Information section.\n"
                    
                case "com.apple.security.files.user-selected.read-write":
                    markdown += "**Purpose**: Read/write access to user-selected files and folders\n\n"
                    markdown += "**Justification**: Allows users to select any folder as source or destination through NSOpenPanel. Core functionality for a backup app.\n"
                    
                case "com.apple.security.files.bookmarks.app-scope":
                    markdown += "**Purpose**: Persistent access to user-selected folders between app launches\n\n"
                    markdown += "**Justification**: Allows ImageIntact to remember user-selected source and destination folders between sessions using security-scoped bookmarks.\n"
                    
                case "com.apple.security.network.client":
                    markdown += "**Purpose**: Make outgoing network connections\n\n"
                    markdown += "**Justification**: Required for checking for updates from GitHub and accessing network-attached storage devices.\n"
                    
                case "com.apple.security.network.server":
                    markdown += "**Purpose**: Accept incoming network connections\n\n"
                    markdown += "**Justification**: May be needed for SMB/network drive access in certain configurations.\n"
                    
                case "com.apple.security.device.usb":
                    markdown += "**Purpose**: Access USB devices\n\n"
                    markdown += "**Justification**: Detection and optimization for USB-connected external drives.\n"
                    
                default:
                    markdown += "**Purpose**: [TODO: Add description]\n\n"
                    markdown += "**Justification**: [TODO: Add justification]\n"
                    
                    if sensitiveEntitlements.contains(key) {
                        markdown += "\n**App Store Review Note**: This entitlement may require explanation.\n"
                    }
                }
                
                markdown += "\n---\n"
            }
        }
        
        markdown += """
        
        ## App Store Submission Notes
        
        When submitting to the App Store, the following entitlements require explanation in the "App Sandbox Information" section:
        
        1. `com.apple.security.files.downloads.read-write`
        2. `com.apple.security.assets.pictures.read-write`
        
        ### Suggested App Sandbox Information Text:
        
        ```
        ImageIntact requires the following sandbox entitlements to function as a photo backup application:
        
        • com.apple.security.files.downloads.read-write
        Required to write backup files to user-selected external drives and network volumes, which are commonly mounted outside the standard sandbox. Users explicitly select these destinations through NSOpenPanel.
        
        • com.apple.security.assets.pictures.read-write
        Required to read photo and video files from the user's Pictures folder and Photos library for backup. Users explicitly select source folders through NSOpenPanel.
        
        All file access is initiated by explicit user selection through the standard macOS file picker. The app never accesses files without user permission.
        ```
        
        ## Testing Entitlements
        
        Run the following test to update this documentation:
        ```bash
        swift test --filter EntitlementDocumentationTests.testDocumentEntitlements
        ```
        
        Or in Xcode:
        1. Open the Test navigator (⌘6)
        2. Find `EntitlementDocumentationTests`
        3. Run `testDocumentEntitlements`
        
        """
        
        // Write to ENTITLEMENTS.md in repo root
        let outputPath = projectPath.appendingPathComponent("ENTITLEMENTS.md")
        
        do {
            try markdown.write(to: outputPath, atomically: true, encoding: .utf8)
            print("✅ Successfully generated ENTITLEMENTS.md at \(outputPath)")
            print("📋 Found \(plist.count) entitlements")
            
            // Also print sensitive entitlements that need App Store explanation
            let activeSensitive = plist.keys.filter { sensitiveEntitlements.contains($0) }
            if !activeSensitive.isEmpty {
                print("⚠️ The following entitlements require App Store explanation:")
                for entitlement in activeSensitive {
                    print("   - \(entitlement)")
                }
            }
        } catch {
            XCTFail("Failed to write ENTITLEMENTS.md: \(error)")
        }
    }
}