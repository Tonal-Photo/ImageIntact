#!/usr/bin/env swift

import Foundation

// Path to the entitlements file
let scriptURL = URL(fileURLWithPath: CommandLine.arguments[0])
let projectRoot = scriptURL
    .deletingLastPathComponent()
    .deletingLastPathComponent()

let entitlementsPath = projectRoot
    .appendingPathComponent("ImageIntact")
    .appendingPathComponent("ImageIntact.entitlements")

// Read the entitlements plist
guard let entitlementsData = try? Data(contentsOf: entitlementsPath),
      let plist = try? PropertyListSerialization.propertyList(from: entitlementsData, format: nil) as? [String: Any] else {
    print("‚ùå Could not read entitlements file at \(entitlementsPath)")
    exit(1)
}

// Build documentation
var markdown = """
# ImageIntact Entitlements Documentation

This document is automatically generated by `Scripts/document-entitlements.swift`
Last updated: \(DateFormatter.localizedString(from: Date(), dateStyle: .long, timeStyle: .none))

## Active Entitlements

The following entitlements are configured in ImageIntact.entitlements:

"""

// Document each entitlement
// Note: These entitlements were removed after App Store feedback that
// com.apple.security.files.user-selected.read-write is sufficient
let removedEntitlements = [
    "com.apple.security.files.downloads.read-write",
    "com.apple.security.assets.pictures.read-write",
]

for (key, value) in plist.sorted(by: { $0.key < $1.key }) {
    if let boolValue = value as? Bool, boolValue {
        markdown += "\n### `\(key)`\n\n"
        
        // Add explanations for known entitlements
        switch key {
        case "com.apple.security.app-sandbox":
            markdown += "**Purpose**: Enables App Sandbox for Mac App Store distribution\n\n"
            markdown += "**Justification**: Required for Mac App Store apps\n\n"
            markdown += "**User Impact**: Ensures app runs in a secure sandbox environment\n"
            
        case "com.apple.security.files.downloads.read-write":
            markdown += "**Purpose**: Read/write access to Downloads folder and external volumes\n\n"
            markdown += "**Justification**: Users frequently select external drives and network-attached storage as backup destinations, which are often mounted in Downloads or other locations outside the sandbox. Required for writing backup files to user-selected destinations.\n\n"
            markdown += "**User Impact**: Allows backing up to external drives and network volumes\n\n"
            markdown += "**‚ö†Ô∏è App Store Review Note**: This entitlement requires explanation in the App Sandbox Information section.\n"
            
        case "com.apple.security.assets.pictures.read-write":
            markdown += "**Purpose**: Read/write access to Pictures folder and Photos library\n\n"
            markdown += "**Justification**: ImageIntact needs to read photos and videos from the user's Photos library and Pictures folder for backup. This includes RAW files, JPEGs, HEICs, videos, and photo editing session files.\n\n"
            markdown += "**User Impact**: Allows selecting photos and videos from Pictures folder for backup\n\n"
            markdown += "**‚ö†Ô∏è App Store Review Note**: This entitlement requires explanation in the App Sandbox Information section.\n"
            
        case "com.apple.security.files.user-selected.read-write":
            markdown += "**Purpose**: Read/write access to user-selected files and folders\n\n"
            markdown += "**Justification**: Allows users to select any folder as source or destination through NSOpenPanel. Core functionality for a backup app.\n\n"
            markdown += "**User Impact**: Enables the folder selection dialogs\n"
            
        case "com.apple.security.files.bookmarks.app-scope":
            markdown += "**Purpose**: Persistent access to user-selected folders between app launches\n\n"
            markdown += "**Justification**: Allows ImageIntact to remember user-selected source and destination folders between sessions using security-scoped bookmarks.\n\n"
            markdown += "**User Impact**: Folders remain selected after restarting the app\n"
            
        case "com.apple.security.network.client":
            markdown += "**Purpose**: Make outgoing network connections\n\n"
            markdown += "**Justification**: Required for checking for updates from GitHub and accessing network-attached storage devices.\n\n"
            markdown += "**User Impact**: Enables update checking and network drive access\n"
            
        case "com.apple.security.network.server":
            markdown += "**Purpose**: Accept incoming network connections\n\n"
            markdown += "**Justification**: May be needed for SMB/network drive access in certain configurations.\n\n"
            markdown += "**User Impact**: Ensures compatibility with various network storage protocols\n"
            
        case "com.apple.security.device.usb":
            markdown += "**Purpose**: Access USB devices\n\n"
            markdown += "**Justification**: Detection and optimization for USB-connected external drives.\n\n"
            markdown += "**User Impact**: Better performance detection for USB drives\n"
            
        default:
            markdown += "**Purpose**: [TODO: Add description]\n\n"
            markdown += "**Justification**: [TODO: Add justification]\n\n"
            markdown += "**User Impact**: [TODO: Add user impact]\n"
            
            if removedEntitlements.contains(key) {
                markdown += "\n**‚ö†Ô∏è Note**: This entitlement was removed after App Store feedback.\n"
            }
        }
        
        markdown += "\n---\n"
    }
}

// Count active entitlements
let activeEntitlements = plist.filter { ($0.value as? Bool) == true }

markdown += """

## Summary

- **Total Entitlements**: \(activeEntitlements.count)

## App Store Submission Notes

Based on App Store feedback, the app now uses only `com.apple.security.files.user-selected.read-write` for file access, which is sufficient for all user-selected folder operations through NSOpenPanel.

Previously removed entitlements (per App Store guidance):
- `com.apple.security.files.downloads.read-write` - Not needed with user-selected.read-write
- `com.apple.security.assets.pictures.read-write` - Not needed with user-selected.read-write

### Current App Sandbox Configuration:

```
ImageIntact uses minimal sandbox entitlements:

‚Ä¢ com.apple.security.files.user-selected.read-write
Allows users to select any folder as source or destination through the standard macOS file picker (NSOpenPanel). This single entitlement covers all file access needs since all operations are initiated by explicit user selection.

‚Ä¢ com.apple.security.network.client
Required for checking updates from GitHub and accessing network-attached storage devices.

The app never accesses files without explicit user permission through the file picker.
```

## Updating This Documentation

Run the following command from the project root:
```bash
swift Scripts/document-entitlements.swift
```

Or make it executable and run directly:
```bash
chmod +x Scripts/document-entitlements.swift
./Scripts/document-entitlements.swift
```

"""

// Write to ENTITLEMENTS.md in repo root
let outputPath = projectRoot.appendingPathComponent("ENTITLEMENTS.md")

do {
    try markdown.write(to: outputPath, atomically: true, encoding: .utf8)
    print("‚úÖ Successfully generated ENTITLEMENTS.md at \(outputPath)")
    print("üìã Found \(activeEntitlements.count) entitlements")
    
    // Print summary
    print("üìä Active entitlements:")
    for key in activeEntitlements.keys.sorted() {
        print("   ‚úì \(key)")
    }
} catch {
    print("‚ùå Failed to write ENTITLEMENTS.md: \(error)")
    exit(1)
}