name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: macos-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Generate Release Notes
      id: release_notes
      run: |
        cat << EOF > release_notes.md
        ## ImageIntact v${{ steps.get_version.outputs.version }}
        
        ### What's New
        - Phase-based backup architecture for improved reliability
        - SHA-1 checksums for 2-3x faster verification
        - Support for up to 8 concurrent operations
        - Improved progress tracking and UI responsiveness
        - Detailed completion statistics
        
        ### Installation
        1. Download the DMG file below
        2. Open the DMG and drag ImageIntact to your Applications folder
        3. On first launch, approve folder access permissions
        
        ### Requirements
        - macOS 11.0 or later
        - Apple Silicon or Intel Mac
        
        ### Support
        - Report issues: [GitHub Issues](https://github.com/kmichels/ImageIntact/issues)
        - Documentation: [README](https://github.com/kmichels/ImageIntact#readme)
        EOF
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: ImageIntact v${{ steps.get_version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false

  build-and-upload:
    name: Build and Upload Release
    needs: create-release
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Xcode
      run: |
        sudo xcode-select -switch /Applications/Xcode_15.2.app/Contents/Developer
        xcodebuild -version
    
    - name: Update version in Info.plist
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $VERSION" ImageIntact/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $VERSION" ImageIntact/Info.plist
    
    - name: Build Release
      run: |
        xcodebuild clean archive \
          -scheme ImageIntact \
          -configuration Release \
          -archivePath build/ImageIntact.xcarchive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          MARKETING_VERSION="${{ needs.create-release.outputs.version }}" \
          CURRENT_PROJECT_VERSION="${{ needs.create-release.outputs.version }}"
    
    - name: Export Archive
      run: |
        # Try to export with options plist
        xcodebuild -exportArchive \
          -archivePath build/ImageIntact.xcarchive \
          -exportPath build/export \
          -exportOptionsPlist ExportOptions.plist || \
        echo "Export with plist failed, creating manual app bundle..."
        
        # Fallback: manually create app bundle
        if [ ! -d "build/export/ImageIntact.app" ]; then
          mkdir -p build/export
          cp -R build/ImageIntact.xcarchive/Products/Applications/ImageIntact.app build/export/
        fi
    
    - name: Create DMG
      run: |
        # Create a nice DMG with background and app alias
        mkdir -p dmg_contents
        cp -R build/export/ImageIntact.app dmg_contents/
        ln -s /Applications dmg_contents/Applications
        
        hdiutil create -volname "ImageIntact ${{ needs.create-release.outputs.version }}" \
          -srcfolder dmg_contents \
          -ov -format UDZO \
          "ImageIntact-${{ needs.create-release.outputs.version }}.dmg"
        
        # Get file size
        ls -lh ImageIntact-*.dmg
    
    - name: Upload DMG to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ImageIntact-${{ needs.create-release.outputs.version }}.dmg
        asset_name: ImageIntact-${{ needs.create-release.outputs.version }}.dmg
        asset_content_type: application/x-apple-diskimage
    
    - name: Generate SHA256 Checksum
      run: |
        shasum -a 256 ImageIntact-${{ needs.create-release.outputs.version }}.dmg > ImageIntact-${{ needs.create-release.outputs.version }}.dmg.sha256
        cat ImageIntact-${{ needs.create-release.outputs.version }}.dmg.sha256
    
    - name: Upload Checksum to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ImageIntact-${{ needs.create-release.outputs.version }}.dmg.sha256
        asset_name: ImageIntact-${{ needs.create-release.outputs.version }}.dmg.sha256
        asset_content_type: text/plain