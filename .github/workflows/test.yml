name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on macOS
    runs-on: macos-latest
    
    strategy:
      matrix:
        xcode: ['15.0', '15.2']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Xcode
      run: |
        sudo xcode-select -switch /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer
        xcodebuild -version
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Build
      run: |
        xcodebuild build \
          -scheme ImageIntact \
          -destination 'platform=macOS' \
          -derivedDataPath build \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
    
    - name: Run Tests
      run: |
        xcodebuild test \
          -scheme ImageIntact \
          -destination 'platform=macOS' \
          -derivedDataPath build \
          -resultBundlePath TestResults \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -enableCodeCoverage YES
    
    - name: Generate Test Report
      if: always()
      run: |
        xcrun xcresulttool get --path TestResults.xcresult --format json > test-results.json || true
        echo "Test Results Summary:"
        if [ -f test-results.json ]; then
          cat test-results.json | python3 -m json.tool | head -100
        fi
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.xcode }}
        path: |
          TestResults.xcresult
          test-results.json
    
    - name: Check for test failures
      if: failure()
      run: |
        echo "::error::Tests failed. Check the test results for details."
        exit 1

  lint:
    name: Code Quality Checks
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: SwiftLint
      run: |
        if which swiftlint >/dev/null; then
          swiftlint --reporter github-actions-logging
        else
          echo "SwiftLint not installed, skipping..."
        fi
    
    - name: Check for TODOs and FIXMEs
      run: |
        echo "Checking for TODO and FIXME comments..."
        grep -rn "TODO\|FIXME" --include="*.swift" . || echo "No TODOs or FIXMEs found"

  build-release:
    name: Build Release Binary
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Xcode
      run: |
        sudo xcode-select -switch /Applications/Xcode_15.2.app/Contents/Developer
        xcodebuild -version
    
    - name: Build Release
      run: |
        xcodebuild archive \
          -scheme ImageIntact \
          -configuration Release \
          -archivePath build/ImageIntact.xcarchive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          SKIP_INSTALL=NO
    
    - name: Export Archive
      run: |
        xcodebuild -exportArchive \
          -archivePath build/ImageIntact.xcarchive \
          -exportPath build/export \
          -exportOptionsPlist ExportOptions.plist || \
        echo "Export failed, creating manual app bundle..."
        
        # Fallback: manually create app bundle if export fails
        if [ ! -d "build/export/ImageIntact.app" ]; then
          mkdir -p build/export
          cp -R build/ImageIntact.xcarchive/Products/Applications/ImageIntact.app build/export/
        fi
    
    - name: Create DMG
      run: |
        # Create a DMG for easy distribution
        hdiutil create -volname "ImageIntact" \
          -srcfolder build/export/ImageIntact.app \
          -ov -format UDZO \
          build/ImageIntact.dmg
    
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ImageIntact-macOS
        path: build/ImageIntact.dmg